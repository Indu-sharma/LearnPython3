
"""
Following program will take List commands as string inputs and apply them as method one by one against list and produces final output. 
This avoids the use of many of if-else conditionals. 

"""


def process_comands(in_put, my_list=[]):
    """
    This takes the List Method & method arguments as the input text string and execute it against the my_list.
    Note - This doesn't handle the List operations such as sorted i.e keywords. 
    """
    
    if in_put.strip('\n') != 'print':
        command = in_put.split()[0]
        args = in_put.split()[1:]
        args = tuple(map(lambda x : int(x), args))
        obj = getattr(my_list, command) 
        obj(*args)
    else:
        print(my_list)

if __name__ == '__main__':
    my_list = []
    N = int(input())
    for i in range(N):
        process_comands(input())


""" 
Sample Input:
12
insert 0 10
print
insert 1 1
insert 0 6
remove 6
append 9
append 1
sort
print
pop
reverse
print

"""



"""
Following program will check whether a string has any alphaneumeric or alphabetical or digits or lower letter or upper letter character in it.

"""
s = input()
my_methods = ['isalnum', 'isalpha', 'isdigit', 'islower', 'isupper']
for i in my_methods:
    for char in s:
        obj = getattr(char, i)
        if obj():
            print(obj())
            break
    else:
        print(False)
"""
Another Approach is to use any method in Python

"""

s = input()
my_methods = ['isalnum', 'isalpha', 'isdigit', 'islower', 'isupper']
for i in my_methods:
    print(any([getattr(char, i)() for char in s]))
   

